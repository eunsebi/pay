<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pay">
	
	<select id="getMaxSeq" resultType="int">
		SELECT if(MAX(SEQ) is null,1,MAX(SEQ)) FROM PAY_VIEW
	</select>
	
	<select id="getCount" resultType="int">
		SELECT
			COUNT(SEQ)
		FROM PAY_VIEW
		WHERE TO_DAYS(#{today}) BETWEEN TO_DAYS(STARTTIME) AND TO_DAYS(ENDTIME)
		<if test="sText != null and sText != ''">
			<if test="sType == 'title'">
				AND TITLE LIKE CONCAT('%',#{sText}, '%') 
			</if>
			<if test="sType == 'contents'">
				AND CONTENTS LIKE CONCAT('%',#{sText}, '%')
			</if>
			<if test="sType == 'writer'">
				AND NAME LIKE CONCAT('%',#{sText}, '%')
			</if>
		</if> 
	</select>
	
	<select id="getList" resultType="map">
		SELECT
			SEQ as seq,
			EMAIL as email,
			WRITER as writer,
			TITLE as title,
			STARTTIME as starttime,
			ENDTIME as endtime
		FROM PAY_VIEW
		WHERE (TO_DAYS(STARTTIME) BETWEEN TO_DAYS(#{sDay}) AND TO_DAYS(LAST_DAY(#{eDay})) OR TO_DAYS(ENDTIME) BETWEEN TO_DAYS(#{sDay}) AND TO_DAYS(LAST_DAY(#{eDay})) OR TO_DAYS(#{sDay}) BETWEEN TO_DAYS(STARTTIME) AND TO_DAYS(ENDTIME))
			AND EMAIL = #{write}
		ORDER BY STARTTIME ASC
	</select>

	<select id="getSchedule" resultType="map">
		SELECT
			SEQ as seq,
			EMAIL as email,
			WRITER as writer,
			TITLE as title,
			STARTTIME as starttime,
			ENDTIME as endtime,
			REGTIME as regtime,
			UPTIME as uptime,
			ETCYN as etcYn
		FROM PAY_VIEW
		WHERE SEQ = #{seq}
	</select>
	
	<insert id="insert">
		INSERT INTO PAY
			(
				SEQ,
				WRITER,
				TITLE,
				pay_day,
				pay_ot,
				pay_ottime,
				pay_latetime,
				pay_nighttime,
				STARTTIME,
				ENDTIME,
				ETC_YN,
				REGTIME,
				UPTIME
			)
		VALUES
			(
			#{seq},
			#{writer},
				#{title},
			#{pay_day},
			#{pay_ot},
			#{pay_ottime},
			#{pay_latetime},
			#{pay_nighttime},
			#{starttime},
			#{endtime},
			#{etcYn},
			NOW(),
			NOW()
			)
	</insert>

	<insert id="payMonthWrite">
		INSERT INTO PAY_DATA
		(
			USER_EMAIL,
			PAY_DATE,
			TIME_SALARY,
			JOB_TIME,
			FULL_WORKING_PENSION,
			FAMILY_PENSION,
			POSITION_PENSION,
			LONGEVITY_PENSION,
			TEXES,
			REGTIME,
			UPTIME
		)
		VALUES
		(
		#{user_email},
		#{pay_date},
		#{time_salary},
		#{job_time},
		#{full_working_pension},
		#{family_pension},
		#{position_pension},
		#{longevity_pension},
		#{texes},
		NOW(),
		NOW()
		)
	</insert>
	
	<select id="getScheduleFiles" resultType="map">
		SELECT 
			SEQ as seq,
			SCHEDULE_SEQ as scheduleSeq,
			SUBNAME as subname,
			REALNAME as realname,
			REGTIME as regtime
		FROM SCHEDULE_FILES
		WHERE SCHEDULE_SEQ = #{seq}
	</select>

	<select id="getFile" resultType="map">
		SELECT 
			SEQ as seq,
			SCHEDULE_SEQ as scheduleSeq,
			SUBNAME as subname,
			REALNAME as realname,
			REGTIME as regtime
		FROM SCHEDULE_FILES
		WHERE SEQ = #{seq}
	</select>
	
	<insert id="insertFile">
		INSERT INTO SCHEDULE_FILES
			(
			SCHEDULE_SEQ,
			SUBNAME,
			REALNAME,
			REGTIME
			)
		VALUES
			(
			#{scheduleSeq},
			#{subname},
			#{realname},
			NOW()
			)
	</insert>
	
	<delete id="deleteFiles">
		DELETE FROM SCHEDULE_FILES
		WHERE SCHEDULE_SEQ = #{seq}
	</delete>

	<delete id="deleteScheduleFiles">
		DELETE FROM SCHEDULE_FILES
		WHERE SUBNAME = #{name}
	</delete>
	
	<delete id="delete">
		DELETE FROM PAY
		WHERE SEQ = #{seq}
		AND WRITER = #{writer}
	</delete>
	
	<update id="update">
		UPDATE PAY
		SET TITLE = #{title},
			CONTENTS = #{contents},
			STARTTIME = #{starttime},
			ENDTIME = #{endtime},
			ETC_YN = #{etcYn},
			UPTIME = NOW()
		WHERE SEQ = #{seq}
		AND WRITER = #{writer}
	</update>

	<!-- 유저 급여정보 조회 -->
	<select id="selectUserMonelyDetail" resultType="com.min.intranet.service.PayUserDataVO">
		<if test='mode == "DETAIL"'>
			SELECT
			USER_EMAIL AS writer,
			PAY_DATE as payDate,
			FORMAT(TIME_SALARY,0) AS timeSalary,
			FORMAT(JOB_TIME,0) AS jobTime,
			FORMAT(FULL_WORKING_PENSION,0) AS fullWorkingPension,
			FORMAT(FAMILY_PENSION,0) AS familyPension,
			FORMAT(POSITION_PENSION,0) AS positionPension,
			FORMAT(LONGEVITY_PENSION,0) AS longevityPension,
			FORMAT(TEXES,0) AS texes
			FROM
			PAY_DATA
			WHERE
			USER_EMAIL = #{writer} AND PAY_DATE = #{payDate}
		</if>
		<!--</isEqual>-->
		<!--<isEqual property="mode" compareValue="CAL">-->
		<if test='mode == "CAL"'>
			SELECT
			USER_EMAIL AS writer,
			PAY_DATE as payDate,
			TIME_SALARY AS timeSalary,
			JOB_TIME AS jobTime,
			FULL_WORKING_PENSION AS fullWorkingPension,
			FAMILY_PENSION AS familyPension,
			POSITION_PENSION AS positionPension,
			LONGEVITY_PENSION AS longevityPension,
			TEXES AS texes
			FROM
			PAY_DATA
			WHERE
			USER_EMAIL = #{writer} AND PAY_DATE = #{payDate}
		</if>
	</select>

	<!-- 급여 계산 List형 -->
	<select id="selectListSalaryCalculation" parameterType="java.util.Map" resultType="com.min.intranet.util.EgovMap">
		SELECT
		/* 특근 잔업시간 */
		(SELECT IFNULL (SUM(pay_ottime), 0) FROM PAY WHERE pay_day = '4' AND pay_ot = '1' AND WRITER = #{writer} AND (#{searchMonth} BETWEEN SUBSTRING(STARTTIME, 1, 7)  AND SUBSTRING(ENDTIME, 1, 7) )) AS SUM_HOLIDAY_NIGHT_PRO_TIME,
		/* 잔업시간 */
		(SELECT IFNULL (SUM(pay_ottime)-SUM_HOLIDAY_NIGHT_PRO_TIME, 0) FROM PAY WHERE pay_ot = '1' AND WRITER = #{writer} AND (#{searchMonth} BETWEEN SUBSTRING(STARTTIME, 1, 7)  AND SUBSTRING(ENDTIME, 1, 7) )) AS SUM_PRO_TIME,
		/* 야간 근무일 */
		(SELECT IFNULL (COUNT(*), 0) FROM PAY WHERE pay_day = '2' AND WRITER = #{writer} AND (#{searchMonth} BETWEEN SUBSTRING(STARTTIME, 1, 7)  AND SUBSTRING(ENDTIME, 1, 7) )) AS SUM_NIGHT_PRO_DAY,
		/* 야간수당 시간 */
		(SELECT IFNULL (SUM(pay_nighttime), 0) FROM PAY WHERE  WRITER = #{writer} AND (#{searchMonth} BETWEEN SUBSTRING(STARTTIME, 1, 7)  AND SUBSTRING(ENDTIME, 1, 7) )) AS SUM_NIGHT_TIME,
		/* 특근 근무일 */
		(SELECT IFNULL (COUNT(*), 0) FROM PAY WHERE pay_day = '3' AND WRITER =#{writer} AND (#{searchMonth} BETWEEN SUBSTRING(STARTTIME, 1, 7)  AND SUBSTRING(ENDTIME, 1, 7) )) AS SUM_HOLIDAY_DAY,
		/* 특근 잔업시간 */
		(SELECT IFNULL (SUM(pay_ottime), 0) FROM PAY WHERE pay_day = '3' AND WRITER = #{writer} AND (#{searchMonth} BETWEEN SUBSTRING(STARTTIME, 1, 7)  AND SUBSTRING(ENDTIME, 1, 7) )) AS SUM_HOLIDAY_PRO_TIME,
		/* 야간 특근 근무일 */
		(SELECT COUNT(*) FROM PAY WHERE pay_day = '4' AND WRITER = #{writer} AND (#{searchMonth} BETWEEN SUBSTRING(STARTTIME, 1, 7)  AND SUBSTRING(ENDTIME, 1, 7) )) AS SUM_HOLIDAY_NIGHT_DAY

		FROM PAY
		WHERE 1=1
		AND WRITER = #{writer}

		<if test='searchMode != ""'>
			<if test='searchMode == "MONTH"'>
				<if test='searchMonth != ""'>
					<if test="searchMonth != ''">
						AND (#{searchMonth} BETWEEN SUBSTRING(STARTTIME, 1, 7)  AND SUBSTRING(ENDTIME, 1, 7) )
					</if>
				</if>
			</if>
			<if test='searchMode == "WEEK"'>
				<![CDATA[
				AND (
					( SUBSTRING(STARTTIME,1,8) > #{startime} AND SUBSTRING(STARTTIME,1,8) <= #{endtime})
				OR
					( SUBSTRING(ENDTIME,1,8) > #{startime} AND SUBSTRING(STARTTIME,1,8) <= #{endtime})
					)
			]]>
			</if>
			<if test='searchMode == "DAILY"'>
				<![CDATA[
				AND (#{searchDay} BETWEEN SUBSTRING(STARTTIME, 1, 8)  AND SUBSTRING(ENDTIME, 1, 8) )
			]]>
			</if>
		</if>

	</select>

</mapper>